@function create-selector( $module,
	$variant         : null,
	$modifier        : null
) {
	// Get module options
	$root : module($module, root);

	$selector-format : get(selector-format);
	@if module($module, selector-format) != null {
		$selector-format : module($module, selector-format);	
	}

	$root-prefix : get(root-prefix);
	@if module($module, root-prefix) != null {
		$root-prefix : module($module, root-prefix);	
	}

	$root-suffix : get(root-suffix);
	@if module($module, root-suffix) != null {
		$root-suffix : module($module, root-suffix);	
	}

	$variant-prefix : get(variant-prefix);
	@if module($module, variant-prefix) != null {
		$variant-prefix : module($module, variant-prefix);	
	}

	$variant-suffix : get(variant-suffix);
	@if module($module, variant-suffix) != null {
		$variant-suffix : module($module, variant-suffix);	
	}

	$modifier-prefix : get(modifier-prefix);
	@if module($module, modifier-prefix) != null {
		$modifier-prefix : module($module, modifier-prefix);	
	}

	$modifier-suffix : get(modifier-suffix);
	@if module($module, modifier-suffix) != null {
		$modifier-suffix : module($module, modifier-suffix);	
	}



	// Build selector
	$selector: $selector-format;

	$namescheme-placeholders: (
		r: (
			value:  $root,
			prefix: $root-prefix,
			suffix: $root-suffix 
		),
		v: (
			value:  $variant,
			prefix: $variant-prefix,
			suffix: $variant-suffix 
		),
		m: (
			value:  $modifier,
			prefix: $modifier-prefix,
			suffix: $modifier-suffix 
		)
	);

	@each $key, $map in $namescheme-placeholders {
		$value:  map-get($map, value);
		$prefix: map-get($map, prefix);
		$suffix: map-get($map, suffix);

		$p:  '{{' + $key + '}}';
		$pp: '{{' + $key + 'p' + '}}';
		$ps: '{{' + $key + 's' + '}}';

		$selector: str-replace($selector, $p, $value);

		@if $value {
			$selector: str-replace($selector, $pp, $prefix);
			$selector: str-replace($selector, $ps, $suffix);
		} @else {
			$selector: str-replace($selector, $pp, '');
			$selector: str-replace($selector, $ps, '');
		}
	}

	@return $selector;
}
